////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : ALU.vf
// /___/   /\     Timestamp : 11/21/2021 21:05:26
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog C:/Users/beaut/Desktop/flie/LAB7/ALU.vf -w C:/Users/beaut/Desktop/flie/LAB7/ALU.sch
//Design Name: ALU
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale  100 ps / 10 ps

module D4_16E_HXILINX_ALU (D0, D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, A0, A1, A2, A3, E);
    

   output D0;
   output D1;
   output D2;
   output D3;
   output D4;
   output D5;
   output D6;
   output D7;
   output D8;
   output D9;
   output D10;
   output D11;
   output D12;
   output D13;
   output D14;
   output D15;

   input  A0;
   input  A1;
   input  A2;
   input  A3;
   input  E;
  
   reg D0;
   reg D1;
   reg D2;
   reg D3;
   reg D4;
   reg D5;
   reg D6;
   reg D7;
   reg D8;
   reg D9;
   reg D10;
   reg D11;
   reg D12;
   reg D13;
   reg D14;
   reg D15;

      always @ (A0 or A1 or A2 or A3 or E)
      begin
         if(!E)
           {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_0000;
        else
        begin
           case({A3,A2,A1,A0})
             4'b0000 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_0001;
             4'b0001 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_0010;
             4'b0010 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_0100;
             4'b0011 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_1000;
             4'b0100 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0001_0000;
             4'b0101 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0010_0000;
             4'b0110 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0100_0000;
             4'b0111 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_1000_0000;
             4'b1000 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0001_0000_0000;
             4'b1001 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0010_0000_0000;
             4'b1010 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0100_0000_0000;
             4'b1011 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_1000_0000_0000;
             4'b1100 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0001_0000_0000_0000;
             4'b1101 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0010_0000_0000_0000;
             4'b1110 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0100_0000_0000_0000;
             4'b1111 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b1000_0000_0000_0000;
          endcase
        end
     end 

endmodule
`timescale 100 ps / 10 ps

module FTC_HXILINX_ALU(Q, C, CLR, T);
   
   output             Q;

   input 	      C;	
   input 	      CLR;	
   input              T;
   
   parameter INIT = 1'b0;
   reg                Q = INIT;
  
   
 
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  Q <= 1'b0;
	else if(T)
          Q <= !Q;
     end
   
endmodule
`timescale  100 ps / 10 ps

module M4_1E_HXILINX_ALU (O, D0, D1, D2, D3, E, S0, S1);
    

   output O;

   input  D0;
   input  D1;
   input  D2;
   input  D3;
   input  E;
   input  S0;
   input  S1;

   reg O;

   always @ ( D0 or D1 or D2 or D3 or E or S0 or S1)
   begin
      if(!E)
      O <= 1'b0;
      else 
      begin
        case({S1,S0})
        2'b00 : O <= D0;
        2'b01 : O <= D1;
        2'b10 : O <= D2;
        2'b11 : O <= D3;
        endcase
      end
   end
    
endmodule
`timescale 1ns / 1ps

module MUX4_TO_1_MUSER_ALU(CLK200Hz, 
                           DATA1, 
                           DATA2, 
                           DATA3, 
                           DATA4, 
                           CM0, 
                           CM1, 
                           CM2, 
                           CM3, 
                           OUTPUT);

    input CLK200Hz;
    input [3:0] DATA1;
    input [3:0] DATA2;
    input [3:0] DATA3;
    input [3:0] DATA4;
   output CM0;
   output CM1;
   output CM2;
   output CM3;
   output [3:0] OUTPUT;
   
   wire XLXN_29;
   wire XLXN_34;
   wire XLXN_36;
   wire XLXN_46;
   wire XLXN_49;
   wire XLXN_88;
   wire XLXN_90;
   wire XLXN_95;
   
   (* HU_SET = "XLXI_1_10" *) 
   M4_1E_HXILINX_ALU  XLXI_1 (.D0(DATA1[0]), 
                             .D1(DATA2[0]), 
                             .D2(DATA3[0]), 
                             .D3(DATA4[0]), 
                             .E(XLXN_29), 
                             .S0(XLXN_46), 
                             .S1(XLXN_95), 
                             .O(OUTPUT[0]));
   (* HU_SET = "XLXI_2_11" *) 
   M4_1E_HXILINX_ALU  XLXI_2 (.D0(DATA1[1]), 
                             .D1(DATA2[1]), 
                             .D2(DATA3[1]), 
                             .D3(DATA4[1]), 
                             .E(XLXN_29), 
                             .S0(XLXN_46), 
                             .S1(XLXN_95), 
                             .O(OUTPUT[1]));
   (* HU_SET = "XLXI_3_12" *) 
   M4_1E_HXILINX_ALU  XLXI_3 (.D0(DATA1[2]), 
                             .D1(DATA2[2]), 
                             .D2(DATA3[2]), 
                             .D3(DATA4[2]), 
                             .E(XLXN_29), 
                             .S0(XLXN_46), 
                             .S1(XLXN_95), 
                             .O(OUTPUT[2]));
   (* HU_SET = "XLXI_4_13" *) 
   M4_1E_HXILINX_ALU  XLXI_4 (.D0(DATA1[3]), 
                             .D1(DATA2[3]), 
                             .D2(DATA3[3]), 
                             .D3(DATA4[3]), 
                             .E(XLXN_29), 
                             .S0(XLXN_46), 
                             .S1(XLXN_95), 
                             .O(OUTPUT[3]));
   VCC  XLXI_5 (.P(XLXN_29));
   FDC  XLXI_6 (.C(CLK200Hz), 
               .CLR(XLXN_49), 
               .D(XLXN_46), 
               .Q(XLXN_34));
   FDC  XLXI_7 (.C(XLXN_34), 
               .CLR(XLXN_49), 
               .D(XLXN_95), 
               .Q(XLXN_36));
   INV  XLXI_8 (.I(XLXN_34), 
               .O(XLXN_46));
   INV  XLXI_9 (.I(XLXN_36), 
               .O(XLXN_95));
   GND  XLXI_10 (.G(XLXN_49));
   INV  XLXI_20 (.I(XLXN_46), 
                .O(XLXN_88));
   INV  XLXI_21 (.I(XLXN_95), 
                .O(XLXN_90));
   NAND2  XLXI_22 (.I0(XLXN_90), 
                  .I1(XLXN_88), 
                  .O(CM0));
   NAND2  XLXI_23 (.I0(XLXN_90), 
                  .I1(XLXN_46), 
                  .O(CM1));
   NAND2  XLXI_24 (.I0(XLXN_88), 
                  .I1(XLXN_95), 
                  .O(CM2));
   NAND2  XLXI_25 (.I0(XLXN_46), 
                  .I1(XLXN_95), 
                  .O(CM3));
endmodule
`timescale 1ns / 1ps

module DIV10Hz_MUSER_ALU(CLKIN, 
                         CLKOUT);

    input CLKIN;
   output CLKOUT;
   
   wire XLXN_1;
   wire XLXN_2;
   wire XLXN_3;
   wire XLXN_5;
   wire XLXN_7;
   wire XLXN_10;
   wire XLXN_12;
   wire XLXN_19;
   wire CLKOUT_DUMMY;
   
   assign CLKOUT = CLKOUT_DUMMY;
   FDC  XLXI_1 (.C(CLKIN), 
               .CLR(XLXN_19), 
               .D(XLXN_12), 
               .Q(XLXN_10));
   FDC  XLXI_2 (.C(XLXN_12), 
               .CLR(XLXN_19), 
               .D(XLXN_5), 
               .Q(XLXN_1));
   FDC  XLXI_3 (.C(XLXN_5), 
               .CLR(XLXN_19), 
               .D(XLXN_7), 
               .Q(XLXN_2));
   FDC  XLXI_4 (.C(XLXN_7), 
               .CLR(XLXN_19), 
               .D(CLKOUT_DUMMY), 
               .Q(XLXN_3));
   INV  XLXI_5 (.I(XLXN_10), 
               .O(XLXN_12));
   INV  XLXI_6 (.I(XLXN_1), 
               .O(XLXN_5));
   INV  XLXI_7 (.I(XLXN_2), 
               .O(XLXN_7));
   INV  XLXI_8 (.I(XLXN_3), 
               .O(CLKOUT_DUMMY));
   AND2  XLXI_9 (.I0(XLXN_3), 
                .I1(XLXN_1), 
                .O(XLXN_19));
endmodule
`timescale 1ns / 1ps

module DIV200Hz_MUSER_ALU(CIN, 
                          COUT);

    input CIN;
   output COUT;
   
   wire XLXN_1;
   wire XLXN_5;
   wire XLXN_7;
   wire XLXN_11;
   wire COUT_DUMMY;
   
   assign COUT = COUT_DUMMY;
   DIV10Hz_MUSER_ALU  XLXI_1 (.CLKIN(XLXN_5), 
                             .CLKOUT(XLXN_1));
   DIV10Hz_MUSER_ALU  XLXI_2 (.CLKIN(CIN), 
                             .CLKOUT(XLXN_5));
   FDC  XLXI_3 (.C(XLXN_1), 
               .CLR(XLXN_7), 
               .D(COUT_DUMMY), 
               .Q(XLXN_11));
   GND  XLXI_5 (.G(XLXN_7));
   INV  XLXI_8 (.I(XLXN_11), 
               .O(COUT_DUMMY));
endmodule
`timescale 1ns / 1ps

module DIV100KHz_MUSER_ALU(CN, 
                           CO);

    input CN;
   output CO;
   
   wire XLXN_3;
   wire XLXN_4;
   wire XLXN_5;
   wire XLXN_6;
   
   DIV10Hz_MUSER_ALU  XLXI_3 (.CLKIN(XLXN_5), 
                             .CLKOUT(XLXN_6));
   DIV10Hz_MUSER_ALU  XLXI_4 (.CLKIN(XLXN_6), 
                             .CLKOUT(XLXN_3));
   DIV10Hz_MUSER_ALU  XLXI_5 (.CLKIN(XLXN_3), 
                             .CLKOUT(CO));
   DIV10Hz_MUSER_ALU  XLXI_6 (.CLKIN(XLXN_4), 
                             .CLKOUT(XLXN_5));
   DIV10Hz_MUSER_ALU  XLXI_7 (.CLKIN(CN), 
                             .CLKOUT(XLXN_4));
endmodule
`timescale 1ns / 1ps

module BCD_TO_7SEG_MUSER_ALU(BIT, 
                             SEG);

    input [3:0] BIT;
   output [6:0] SEG;
   
   wire D0;
   wire D1;
   wire D2;
   wire D3;
   wire D4;
   wire D5;
   wire D6;
   wire D7;
   wire D8;
   wire D9;
   wire D10;
   wire D11;
   wire D12;
   wire D13;
   wire D14;
   wire D15;
   wire XLXN_1;
   
   (* HU_SET = "XLXI_1_14" *) 
   D4_16E_HXILINX_ALU  XLXI_1 (.A0(BIT[0]), 
                              .A1(BIT[1]), 
                              .A2(BIT[2]), 
                              .A3(BIT[3]), 
                              .E(XLXN_1), 
                              .D0(D0), 
                              .D1(D1), 
                              .D2(D2), 
                              .D3(D3), 
                              .D4(D4), 
                              .D5(D5), 
                              .D6(D6), 
                              .D7(D7), 
                              .D8(D8), 
                              .D9(D9), 
                              .D10(D10), 
                              .D11(D11), 
                              .D12(D12), 
                              .D13(D13), 
                              .D14(D14), 
                              .D15(D15));
   VCC  XLXI_2 (.P(XLXN_1));
   NOR2  XLXI_6 (.I0(D6), 
                .I1(D5), 
                .O(SEG[1]));
   INV  XLXI_7 (.I(D2), 
               .O(SEG[2]));
   NOR2  XLXI_8 (.I0(D4), 
                .I1(D1), 
                .O(SEG[0]));
   NOR3  XLXI_9 (.I0(D7), 
                .I1(D4), 
                .I2(D1), 
                .O(SEG[3]));
   OR4  XLXI_10 (.I0(D8), 
                .I1(D6), 
                .I2(D2), 
                .I3(D0), 
                .O(SEG[4]));
   NOR4  XLXI_11 (.I0(D7), 
                 .I1(D3), 
                 .I2(D2), 
                 .I3(D1), 
                 .O(SEG[5]));
   NOR3  XLXI_12 (.I0(D7), 
                 .I1(D1), 
                 .I2(D0), 
                 .O(SEG[6]));
endmodule
`timescale 1ns / 1ps

module MinuteCounter_MUSER_ALU(CLKIN, 
                               RST, 
                               M1, 
                               M2, 
                               OUTM);

    input CLKIN;
    input RST;
   output [3:0] M1;
   output [3:0] M2;
   output OUTM;
   
   wire CLKOUT;
   wire XLXN_5;
   wire XLXN_6;
   wire XLXN_7;
   wire XLXN_12;
   wire XLXN_24;
   wire XLXN_28;
   wire XLXN_29;
   wire XLXN_31;
   wire XLXN_32;
   wire XLXN_33;
   wire OUTM_DUMMY;
   wire [3:0] M1_DUMMY;
   wire [3:0] M2_DUMMY;
   
   assign M1[3:0] = M1_DUMMY[3:0];
   assign M2[3:0] = M2_DUMMY[3:0];
   assign OUTM = OUTM_DUMMY;
   FDC  XLXI_1 (.C(XLXN_12), 
               .CLR(XLXN_31), 
               .D(XLXN_5), 
               .Q(M1_DUMMY[1]));
   FDC  XLXI_2 (.C(XLXN_5), 
               .CLR(XLXN_31), 
               .D(XLXN_6), 
               .Q(M1_DUMMY[2]));
   FDC  XLXI_3 (.C(XLXN_6), 
               .CLR(XLXN_31), 
               .D(CLKOUT), 
               .Q(M1_DUMMY[3]));
   INV  XLXI_4 (.I(M1_DUMMY[0]), 
               .O(XLXN_12));
   INV  XLXI_5 (.I(M1_DUMMY[1]), 
               .O(XLXN_5));
   INV  XLXI_6 (.I(M1_DUMMY[2]), 
               .O(XLXN_6));
   INV  XLXI_7 (.I(M1_DUMMY[3]), 
               .O(CLKOUT));
   FDC  XLXI_8 (.C(CLKIN), 
               .CLR(XLXN_31), 
               .D(XLXN_12), 
               .Q(M1_DUMMY[0]));
   AND2  XLXI_9 (.I0(M1_DUMMY[3]), 
                .I1(M1_DUMMY[1]), 
                .O(XLXN_33));
   FDC  XLXI_10 (.C(XLXN_28), 
                .CLR(XLXN_29), 
                .D(XLXN_24), 
                .Q(M2_DUMMY[1]));
   FDC  XLXI_11 (.C(XLXN_24), 
                .CLR(XLXN_29), 
                .D(XLXN_7), 
                .Q(M2_DUMMY[2]));
   FDC  XLXI_12 (.C(XLXN_7), 
                .CLR(XLXN_29), 
                .D(OUTM_DUMMY), 
                .Q(M2_DUMMY[3]));
   INV  XLXI_13 (.I(M2_DUMMY[0]), 
                .O(XLXN_28));
   INV  XLXI_14 (.I(M2_DUMMY[1]), 
                .O(XLXN_24));
   INV  XLXI_15 (.I(M2_DUMMY[2]), 
                .O(XLXN_7));
   INV  XLXI_16 (.I(M2_DUMMY[3]), 
                .O(OUTM_DUMMY));
   FDC  XLXI_17 (.C(CLKOUT), 
                .CLR(XLXN_29), 
                .D(XLXN_28), 
                .Q(M2_DUMMY[0]));
   AND2  XLXI_18 (.I0(M2_DUMMY[3]), 
                 .I1(M2_DUMMY[1]), 
                 .O(XLXN_32));
   OR2  XLXI_19 (.I0(XLXN_32), 
                .I1(RST), 
                .O(XLXN_29));
   OR2  XLXI_20 (.I0(XLXN_33), 
                .I1(RST), 
                .O(XLXN_31));
endmodule
`timescale 1ns / 1ps

module SecondCounter_MUSER_ALU(CLKIN, 
                               RST, 
                               BIT, 
                               MIN, 
                               OUTS);

    input CLKIN;
    input RST;
   output [3:0] BIT;
   output [3:0] MIN;
   output OUTS;
   
   wire CLKOUT;
   wire XLXN_6;
   wire XLXN_7;
   wire XLXN_9;
   wire XLXN_13;
   wire XLXN_33;
   wire XLXN_36;
   wire XLXN_44;
   wire XLXN_46;
   wire XLXN_47;
   wire OUTS_DUMMY;
   wire [3:0] BIT_DUMMY;
   wire [3:0] MIN_DUMMY;
   
   assign BIT[3:0] = BIT_DUMMY[3:0];
   assign MIN[3:0] = MIN_DUMMY[3:0];
   assign OUTS = OUTS_DUMMY;
   FDC  XLXI_1 (.C(XLXN_9), 
               .CLR(XLXN_13), 
               .D(XLXN_6), 
               .Q(BIT_DUMMY[2]));
   INV  XLXI_2 (.I(BIT_DUMMY[0]), 
               .O(XLXN_7));
   INV  XLXI_3 (.I(BIT_DUMMY[1]), 
               .O(XLXN_9));
   INV  XLXI_4 (.I(BIT_DUMMY[3]), 
               .O(CLKOUT));
   FDC  XLXI_5 (.C(CLKIN), 
               .CLR(XLXN_13), 
               .D(XLXN_7), 
               .Q(BIT_DUMMY[0]));
   AND2  XLXI_6 (.I0(BIT_DUMMY[3]), 
                .I1(BIT_DUMMY[1]), 
                .O(XLXN_46));
   FDC  XLXI_7 (.C(XLXN_7), 
               .CLR(XLXN_13), 
               .D(XLXN_9), 
               .Q(BIT_DUMMY[1]));
   INV  XLXI_8 (.I(BIT_DUMMY[2]), 
               .O(XLXN_6));
   FDC  XLXI_9 (.C(XLXN_6), 
               .CLR(XLXN_13), 
               .D(CLKOUT), 
               .Q(BIT_DUMMY[3]));
   FDC  XLXI_10 (.C(CLKOUT), 
                .CLR(XLXN_44), 
                .D(XLXN_36), 
                .Q(MIN_DUMMY[0]));
   FDC  XLXI_11 (.C(XLXN_36), 
                .CLR(XLXN_44), 
                .D(XLXN_33), 
                .Q(MIN_DUMMY[1]));
   INV  XLXI_12 (.I(MIN_DUMMY[0]), 
                .O(XLXN_36));
   INV  XLXI_13 (.I(MIN_DUMMY[1]), 
                .O(XLXN_33));
   INV  XLXI_14 (.I(MIN_DUMMY[2]), 
                .O(OUTS_DUMMY));
   FDC  XLXI_15 (.C(XLXN_33), 
                .CLR(XLXN_44), 
                .D(OUTS_DUMMY), 
                .Q(MIN_DUMMY[2]));
   AND2  XLXI_16 (.I0(MIN_DUMMY[1]), 
                 .I1(MIN_DUMMY[2]), 
                 .O(XLXN_47));
   GND  XLXI_87 (.G(MIN_DUMMY[3]));
   OR2  XLXI_88 (.I0(XLXN_47), 
                .I1(RST), 
                .O(XLXN_44));
   OR2  XLXI_89 (.I0(XLXN_46), 
                .I1(RST), 
                .O(XLXN_13));
endmodule
`timescale 1ns / 1ps

module Clock_MMSS_MUSER_ALU(CLK, 
                            RESET, 
                            MM1, 
                            MM2, 
                            SS1, 
                            SS2);

    input CLK;
    input RESET;
   output [3:0] MM1;
   output [3:0] MM2;
   output [3:0] SS1;
   output [3:0] SS2;
   
   wire XLXN_1;
   
   SecondCounter_MUSER_ALU  XLXI_3 (.CLKIN(CLK), 
                                   .RST(RESET), 
                                   .BIT(SS1[3:0]), 
                                   .MIN(SS2[3:0]), 
                                   .OUTS(XLXN_1));
   MinuteCounter_MUSER_ALU  XLXI_4 (.CLKIN(XLXN_1), 
                                   .RST(RESET), 
                                   .M1(MM1[3:0]), 
                                   .M2(MM2[3:0]), 
                                   .OUTM());
endmodule
`timescale 1ns / 1ps

module ALU(OSC, 
           Reset, 
           SW, 
           COM0, 
           COM1, 
           COM2, 
           COM3, 
           DOT, 
           SEG);

    input OSC;
    input Reset;
    input SW;
   output COM0;
   output COM1;
   output COM2;
   output COM3;
   output DOT;
   output [6:0] SEG;
   
   wire HZ;
   wire [3:0] XLXN_7;
   wire [3:0] XLXN_8;
   wire [3:0] XLXN_9;
   wire [3:0] XLXN_10;
   wire [3:0] XLXN_17;
   wire XLXN_52;
   wire XLXN_53;
   wire XLXN_58;
   wire XLXN_64;
   wire XLXN_68;
   wire XLXN_74;
   wire XLXN_75;
   wire COM2_DUMMY;
   
   assign COM2 = COM2_DUMMY;
   Clock_MMSS_MUSER_ALU  XLXI_1 (.CLK(XLXN_74), 
                                .RESET(XLXN_58), 
                                .MM1(XLXN_9[3:0]), 
                                .MM2(XLXN_10[3:0]), 
                                .SS1(XLXN_7[3:0]), 
                                .SS2(XLXN_8[3:0]));
   DIV100KHz_MUSER_ALU  XLXI_2 (.CN(OSC), 
                               .CO(HZ));
   DIV200Hz_MUSER_ALU  XLXI_3 (.CIN(HZ), 
                              .COUT(XLXN_68));
   BCD_TO_7SEG_MUSER_ALU  XLXI_5 (.BIT(XLXN_17[3:0]), 
                                 .SEG(SEG[6:0]));
   (* HU_SET = "XLXI_6_15" *) 
   FTC_HXILINX_ALU  XLXI_6 (.C(SW), 
                           .CLR(XLXN_64), 
                           .T(SW), 
                           .Q(XLXN_53));
   AND2  XLXI_13 (.I0(XLXN_68), 
                 .I1(XLXN_53), 
                 .O(XLXN_74));
   AND2  XLXI_14 (.I0(Reset), 
                 .I1(XLXN_52), 
                 .O(XLXN_58));
   INV  XLXI_15 (.I(XLXN_53), 
                .O(XLXN_52));
   GND  XLXI_16 (.G(XLXN_64));
   MUX4_TO_1_MUSER_ALU  XLXI_18 (.CLK200Hz(HZ), 
                                .DATA1(XLXN_7[3:0]), 
                                .DATA2(XLXN_8[3:0]), 
                                .DATA3(XLXN_9[3:0]), 
                                .DATA4(XLXN_10[3:0]), 
                                .CM0(COM0), 
                                .CM1(COM1), 
                                .CM2(COM2_DUMMY), 
                                .CM3(COM3), 
                                .OUTPUT(XLXN_17[3:0]));
   AND2  XLXI_19 (.I0(XLXN_75), 
                 .I1(XLXN_74), 
                 .O(DOT));
   INV  XLXI_20 (.I(COM2_DUMMY), 
                .O(XLXN_75));
endmodule
